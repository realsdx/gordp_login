package main

import (
	"crypto/tls"
	"fmt"
	"log"
	"net"
)

func ConnectionRequestPDU() []byte {
	data := "\x03\x00\x00)$\xe0\x00\x00\x00\x00\x00Cookie: mstshash=xyz\r\n\x01\x00\x08\x00\x01\x00\x00\x00"
	return []byte(data)
}

func ClientDataPDU() []byte {
	tpkt := "\x03\x00\x01\x8b"
	cc_header := "\x02\xf0\x80"
	data := "\x7fe\x82\x01\x7f\x04\x01\x01\x04\x01\x01\x01\x01\xff0\x1a\x02\x01\"\x02\x01\x02\x02\x01\x00\x02\x01\x01\x02\x01\x00\x02\x01\x01\x02\x03\x00\xff\xff\x02\x01\x020\x19\x02\x01\x01\x02\x01\x01\x02\x01\x01\x02\x01\x01\x02\x01\x00\x02\x01\x01\x02\x02\x04 \x02\x01\x020 \x02\x03\x00\xff\xff\x02\x03\x00\xfc\x17\x02\x03\x00\xff\xff\x02\x01\x01\x02\x01\x00\x02\x01\x01\x02\x03\x00\xff\xff\x02\x01\x02\x04\x82\x01\x19\x00\x05\x00\x14|\x00\x01\x81\x10\x00\x08\x00\x10\x00\x01\xc0\x00Duca\x81\x02\x01\xc0\xea\x00\x04\x00\x08\x00\x00\x04\x00\x03\x01\xca\x03\xaa\t\x04\x00\x00(\n\x00\x00p\x00o\x00p\x00-\x00o\x00s\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xca\x01\x00\x00\x00\x00\x00\x10\x00\x07\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\xc0\x0c\x00\r\x00\x00\x00\x00\x00\x00\x00\x02\xc0\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	return []byte(tpkt + cc_header + data)
}

func ErectDomainRequest() []byte {
	tpkt := "\x03\x00\x00\x0c"
	cc_header := "\x02\xf0\x80"
	data := "\x04\x01\x00\x01\x00"
	return []byte(tpkt + cc_header + data)
}

func AttactUserRequest() []byte {
	tpkt := "\x03\x00\x00\x08"
	cc_header := "\x02\xf0\x80"
	data := "\x28"
	return []byte(tpkt + cc_header + data)
}

func ChannelJoinRequest(channel int) []byte {
	tpkt := "\x03\x00\x00\x0c"
	cc_header := "\x02\xf0\x80"
	data := ""
	if channel == 1007 {
		data = "8\x00\x06\x03\xef"
	}
	if channel == 1003 {
		data = "8\x00\x06\x03\xeb"
	}
	return []byte(tpkt + cc_header + data)
}

func ClientInfoPDU() []byte {
	//This conatins credentials
	tpkt := "\x03\x00\x01\x5f"
	cc_header := "\x02\xf0\x80"
	data := "d\x00\x06\x03\xebp\x81P@\x00\x00\x00\x00\x00\x00\x00\xfb\x07\t\x00\x02\x00\x08\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00x\x00x\x00x\x00\x00\x00\x00\x00m\x00y\x00p\x00a\x00s\x00s\x001\x002\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x16\x001\x002\x007\x00.\x000\x00.\x000\x00.\x001\x00\x00\x00\x00\x00B\x00C\x00:\x00\\\x00W\x00i\x00n\x00d\x00o\x00w\x00s\x00\\\x00S\x00y\x00s\x00t\x00e\x00m\x003\x002\x00\\\x00m\x00s\x00t\x00s\x00c\x00a\x00x\x00.\x00d\x00l\x00l\x00\x00\x00\x00\x00\xb6\xfe\xff\xffC\x00\x00\x00l\x00\x00\x00i\x00\x00\x00e\x00\x00\x00n\x00\x00\x00t\x00\x00\x00 \x00\x00\x00L\x00\x00\x00o\x00\x00\x00c\x00\x00\x00a\x00\x00\x00l\x00\x00\x00 \x00\x00\x00T\x00\x00\x00i\x00\x00\x00m\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00C\x00\x00\x00l\x00\x00\x00i\x00\x00\x00e\x00\x00\x00n\x00\x00\x00t\x00\x00\x00 \x00\x00\x00L\x00\x00\x00o\x00\x00\x00c\x00\x00\x00a\x00\x00\x00l\x00\x00\x00 \x00\x00\x00T\x00\x00\x00i\x00\x00\x00m\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00"
	return []byte(tpkt + cc_header + data)
}

func main() {
	fmt.Println("RDP client started...")
	conn, err := net.Dial("tcp", "127.0.0.1:3389")
	if err != nil {
		log.Fatalf("Error: %s", err)
	}

	defer conn.Close()

	//Send Connection RequestPDU
	// conn.Write([]byte(ConnectionRequestPDU()))
	conn.Write(ConnectionRequestPDU())

	// res, _ := ioutil.ReadAll(conn)
	// reader := bufio.NewReader(conn)

	// res, _ := reader.ReadBytes('\n')

	var buffer = make([]byte, 2048)
	bytesRead, _ := conn.Read(buffer)
	res := string(buffer[:bytesRead])
	fmt.Printf("ConnReqResponse: %s\n", res)

	//Tls Config
	config := &tls.Config{
		InsecureSkipVerify: true,
	}

	//TLS Upgrade
	tls_conn := tls.Client(conn, config)

	err = tls_conn.Handshake()
	if err != nil {
		log.Fatalf("TLS: Handshake Error: %s", err)
	}

	tls_conn.Write(ClientDataPDU())
	bytesRead, _ = tls_conn.Read(buffer)
	fmt.Printf("ServerData len: %d\n", bytesRead)

	tls_conn.Write(ErectDomainRequest())
	tls_conn.Write(AttactUserRequest())
	bytesRead, _ = tls_conn.Read(buffer)
	fmt.Printf("AttachConfirm Len: %d\n", bytesRead)

	tls_conn.Write(ChannelJoinRequest(1007))
	bytesRead, _ = tls_conn.Read(buffer)
	fmt.Printf("ChannelJoin resposne 1007 len: %d\n", bytesRead)

	tls_conn.Write(ChannelJoinRequest(1003))
	bytesRead, _ = tls_conn.Read(buffer)
	fmt.Printf("ChannelJoin resposne 1003 len: %d\n", bytesRead)

	tls_conn.Write(ClientInfoPDU())
	bytesRead, err = tls_conn.Read(buffer)
	if err != nil {
		log.Fatalf("Client Info error: %s\n", err)
	}
	fmt.Printf("ClientInfoResponse len: %d\n", bytesRead)
}
